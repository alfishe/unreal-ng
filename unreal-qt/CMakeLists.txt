cmake_minimum_required(VERSION 3.16.0)

message(">> unreal-qt CMakeLists.txt")

# Project named 'core' on C++
project(unreal-qt LANGUAGES CXX)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (CMAKE_VERSION VERSION_LESS "3.7.0")
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif ()

# Set paths
get_filename_component(ROOT_DIR ../ ABSOLUTE BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set (SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Hint to CMake where to find Qt
set(CMAKE_PREFIX_PATH /Users/dev/Qt/5.15.2/clang_64)

# Qt specific settings
find_package(Qt5 COMPONENTS Gui REQUIRED)
find_package(Qt5 COMPONENTS Multimedia REQUIRED)
find_package(Qt5 COMPONENTS Widgets REQUIRED)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC OFF)
set(CMAKE_AUTOUIC OFF)
set(CMAKE_AUTOUIC_SEARCH_PATHS ${SOURCE_DIR}/ui)
add_definitions( ${QT_DEFINITIONS} )
include_directories( ${CMAKE_BINARY_DIR} )

# Default to Release mode
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif ()



# Resolve base paths for Core library and Data
get_filename_component(CORE_LIBRARY_PATH
                       "${CMAKE_CURRENT_LIST_DIR}/../core"
                       ABSOLUTE)
message("CORE_LIBRARY_PATH: ${CORE_LIBRARY_PATH}")
get_filename_component(DATA_PATH
        "${CMAKE_CURRENT_LIST_DIR}/../data"
        ABSOLUTE)
message("DATA_PATH: ${DATA_PATH}")

# Include CMake helper functions file
include(${ROOT_DIR}/cmake/func.cmake)

# Set include paths for compiler
include_directories(
        ${SOURCE_DIR}/
        ${SOURCE_DIR}/3rdparty
)


# All sources in /src and subfolders will be compiled
file (GLOB_RECURSE CPP_FILES ${SOURCE_DIR}/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CPP_FILES}" "/build/" FALSE OUTVAR CPP_FILES) # Exclude /build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CPP_FILES}" "/CMakeFiles/" FALSE OUTVAR CPP_FILES) # Exclude /CMakeFile autogenerated files
set (SOURCES ${CPP_FILES})
message("CPP_FILES:${CPP_FILES}")

# UI files
file (GLOB_RECURSE UI_FILES ${SOURCE_DIR}/*.ui)
message("UI_FILES:${UI_FILES}")
QT5_WRAP_UI(UI_HEADERS ${UI_FILES})
message("UI_HEADERS:${UI_HEADERS}")

# Put binary and configuration files to /bin subfolder
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Produce executable
add_executable(${PROJECT_NAME} ${CPP_FILES} ${UI_HEADERS})

# Declare _DEBUG symbol for compiler
if (CMAKE_BUILD_TYPE MATCHES Debug)
    message(STATUS "CMAKE_BUILD_TYPE:${CMAKE_BUILD_TYPE} - defining '_DEBUG'")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _DEBUG)
endif (CMAKE_BUILD_TYPE MATCHES Debug)

# Add core library includes path for testclient
target_include_directories(${PROJECT_NAME} PRIVATE ${CORE_LIBRARY_PATH}/src)

# Link all dependencies
if (APPLE)
    target_link_directories(${PROJECT_NAME} PRIVATE /usr/lib)
    set(common_libraries pthread iconv)
endif (APPLE)

if (UNIX AND NOT APPLE)
    set(common_libraries -static-libstdc++ pthread)
endif (UNIX AND NOT APPLE)

# Link with Qt5, emulator core and C++ common libraries
target_link_directories(${PROJECT_NAME} PRIVATE ${ROOT_DIR}/cmake-build-debug/core/src)
target_link_libraries(${PROJECT_NAME} PRIVATE core)
target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Widgets)
target_link_libraries(${PROJECT_NAME} PRIVATE Qt5::Multimedia)
target_link_libraries(${PROJECT_NAME} PRIVATE ${common_libraries})


# Copy font file(s) to /fonts subfolder
add_custom_command(
        TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${DATA_PATH}/fonts ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/fonts
)

# Copy default config file to binary folder after successful compilation
SET (CONFIG_FILE ${DATA_PATH}/configs/pentagon/unreal.ini)
message("CONFIG_FILE: ${CONFIG_FILE}")
message("Binary: ${CMAKE_BINARY_DIR}/${PROJECT_NAME}")
add_custom_command(
        TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E
        copy ${CONFIG_FILE} "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/unreal.ini"
)

# Copy all ROM files to /rom subfolder
add_custom_command(
        TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${DATA_PATH}/rom ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rom
)

