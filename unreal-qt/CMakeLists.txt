cmake_minimum_required(VERSION 3.16.0)

message(">> unreal-qt CMakeLists.txt")

# Project named 'core' on C++
project(unreal-qt LANGUAGES CXX)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (CMAKE_VERSION VERSION_LESS "3.7.0")
    set(CMAKE_INCLUDE_CURRENT_DIR ON)
endif ()

# Set paths
get_filename_component(ROOT_DIR ../ ABSOLUTE BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set (SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Build all dependency libraries
add_subdirectory("${ROOT_DIR}/core/src" core)
add_subdirectory("${ROOT_DIR}/core/tests" tests)

# ========================================
# Platform-specific Qt path detection
# ========================================

# Default Qt paths (can be overridden via command line)
if (NOT DEFINED QT_INSTALL_PATH)
    if (APPLE)  # macOS
        list(APPEND QT_INSTALL_PATH
            "$ENV{HOME}/Qt/6.5.0/macos"
            "$ENV{HOME}/Qt/6.5.3/macos"
            "$ENV{HOME}/Qt/6.9.0/macos"
            "$ENV{QTDIR}"
        )
    elseif (UNIX AND NOT APPLE)  # Linux
        set(QT_INSTALL_PATH "$ENV{HOME}/Qt/6.5.0/gcc_64")
    elseif (WIN32)  # Windows
        set(QT_INSTALL_PATH "C:/Qt/6.5.0/msvc2019_64")
    endif ()
else ()
    message(STATUS "Using user-specified Qt path: ${QT_INSTALL_PATH}")
endif ()

# Allow overriding via -DQT_INSTALL_PATH=...
set(QT_INSTALL_PATH "${QT_INSTALL_PATH}" CACHE PATH "Path to Qt installation")

# Append Qt path to CMAKE_PREFIX_PATH
list(APPEND CMAKE_PREFIX_PATH "${QT_INSTALL_PATH}")

# Qt specific settings
find_package(Qt6 REQUIRED)
find_package(Qt6 COMPONENTS Gui REQUIRED)
find_package(Qt6 COMPONENTS Multimedia REQUIRED)
find_package(Qt6 COMPONENTS Widgets REQUIRED)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC OFF)
set(CMAKE_AUTOUIC OFF)
set(CMAKE_AUTOUIC_SEARCH_PATHS ${SOURCE_DIR}/ui)
add_definitions( ${QT_DEFINITIONS} )
include_directories( ${CMAKE_BINARY_DIR} )

# Default to Release mode
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif ()



# Resolve base paths for Core library and Data
get_filename_component(CORE_LIBRARY_PATH
                       "${CMAKE_CURRENT_LIST_DIR}/../core"
                       ABSOLUTE)
message("CORE_LIBRARY_PATH: ${CORE_LIBRARY_PATH}")
get_filename_component(DATA_PATH
        "${CMAKE_CURRENT_LIST_DIR}/../data"
        ABSOLUTE)
message("DATA_PATH: ${DATA_PATH}")

# Include CMake helper functions file
include(${ROOT_DIR}/cmake/func.cmake)

# Set include paths for compiler
include_directories(
        ${SOURCE_DIR}/
        ${SOURCE_DIR}/3rdparty
)


# All sources in /src and subfolders will be compiled
file (GLOB_RECURSE CPP_FILES ${SOURCE_DIR}/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CPP_FILES}" "/build/" FALSE OUTVAR CPP_FILES) # Exclude /build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CPP_FILES}" "/CMakeFiles/" FALSE OUTVAR CPP_FILES) # Exclude /CMakeFile autogenerated files
set (SOURCES ${CPP_FILES})
message("CPP_FILES:${CPP_FILES}")

# UI files
file (GLOB_RECURSE UI_FILES ${SOURCE_DIR}/*.ui)
message("UI_FILES:${UI_FILES}")
QT6_WRAP_UI(UI_HEADERS ${UI_FILES})
message("UI_HEADERS:${UI_HEADERS}")

# Put binary and configuration files to /bin subfolder
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# Produce executable
add_executable(${PROJECT_NAME} ${CPP_FILES} ${UI_HEADERS})

# Declare _DEBUG symbol for compiler
if (CMAKE_BUILD_TYPE MATCHES Debug)
    message(STATUS "CMAKE_BUILD_TYPE:${CMAKE_BUILD_TYPE} - defining '_DEBUG'")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _DEBUG)
endif (CMAKE_BUILD_TYPE MATCHES Debug)

# Add core library includes path for testclient
target_include_directories(${PROJECT_NAME} PRIVATE ${CORE_LIBRARY_PATH}/src)

# Link all dependencies
if (APPLE)
    target_link_directories(${PROJECT_NAME} PRIVATE /usr/lib)
    set(common_libraries pthread iconv)
endif (APPLE)

if (UNIX AND NOT APPLE)
    set(common_libraries -static-libstdc++ pthread)
endif (UNIX AND NOT APPLE)

# Link with Qt, emulator core and C++ common libraries
target_link_libraries(
    ${PROJECT_NAME} PRIVATE

    unrealng::core
    Qt6::Widgets
    Qt6::Multimedia
    ${common_libraries}
)


# Define data paths
set(DATA_PATH "${ROOT_DIR}/data")
set(CONFIG_FILE "${DATA_PATH}/configs/pentagon512k/unreal.ini")

# Copy resources using modern CMake syntax
add_custom_command(
    TARGET ${PROJECT_NAME} POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${DATA_PATH}/fonts" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/fonts"
    COMMAND ${CMAKE_COMMAND} -E copy
        "${CONFIG_FILE}" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/unreal.ini"
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${DATA_PATH}/rom" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rom"
    COMMAND ${CMAKE_COMMAND} -E copy_directory
        "${DATA_PATH}/testrom" "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/rom"
    COMMENT "Copying runtime resource files to output directory"
)

# Install rules for packaging
install(DIRECTORY ${DATA_PATH}/fonts
    DESTINATION ${CMAKE_INSTALL_PREFIX}/fonts
)

install(FILES ${CONFIG_FILE}
    DESTINATION ${CMAKE_INSTALL_PREFIX}
)

install(DIRECTORY ${DATA_PATH}/rom
    DESTINATION ${CMAKE_INSTALL_PREFIX}/rom
)

# Debug output
message(STATUS "CONFIG_FILE: ${CONFIG_FILE}")
message(STATUS "Binary: ${CMAKE_BINARY_DIR}/${PROJECT_NAME}")

# <Diagnostics>
message(STATUS "<unreal-qt diagnostics>")
message(STATUS "  PROJECT_NAME:        ${PROJECT_NAME}")
message(STATUS "  SRC_DIR:             ${SRC_DIR}")
message(STATUS "  LIB_DIR:             ${LIB_DIR}")

message(STATUS "  INCLUDE_DIRECTORIES:")
get_property(include_dirs DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY INCLUDE_DIRECTORIES)
foreach (dir ${include_dirs})
    message(STATUS "                       ${dir}")
endforeach ()

message(STATUS "</unreal-qt diagnostics>")
# </Diagnostics>