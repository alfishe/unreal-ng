cmake_minimum_required(VERSION 3.16.0)

message(">> testclient CMakeLists.txt")

# Project named 'testclient' on C++
project(testclient LANGUAGES CXX)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Default to Release mode
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif ()

# Diagnostics
message("CMAKE_BUILD_TYPE: '${CMAKE_BUILD_TYPE}'")

# Include CMake helper functions file
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/func.cmake)

# Use /src as root for include files
include_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/src
)

# Use all .cpp files from /src (recursively)
file (GLOB_RECURSE CPP_FILES ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${TEST_CPP_FILES}" "/build/" FALSE OUTVAR TEST_CPP_FILES) # Exclude /tests/build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${TEST_CPP_FILES}" "/CMakeFiles/" FALSE OUTVAR TEST_CPP_FILES) # Exclude /CMakeFile autogenerated files
set (SOURCES ${CPP_FILES})

message("CPP_FILES:${CPP_FILES}")


# Produce executable
add_executable(${PROJECT_NAME} ${CPP_FILES})

# Declare _DEBUG symbol for compiler
if (CMAKE_BUILD_TYPE MATCHES Debug)
    message(STATUS "CMAKE_BUILD_TYPE:${CMAKE_BUILD_TYPE} - defining '_DEBUG'")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _DEBUG)
endif (CMAKE_BUILD_TYPE MATCHES Debug)


# Resolve base paths for Core library and Data
get_filename_component(CORE_LIBRARY_PATH
                       "${CMAKE_CURRENT_LIST_DIR}/../core"
                       ABSOLUTE)
message("CORE_LIBRARY_PATH: ${CORE_LIBRARY_PATH}")
get_filename_component(DATA_PATH
        "${CMAKE_CURRENT_LIST_DIR}/../data"
        ABSOLUTE)
message("DATA_PATH: ${DATA_PATH}")

# Add core library includes path for testclient
target_include_directories(${PROJECT_NAME} PRIVATE ${CORE_LIBRARY_PATH}/src)

# All standard libraries required
if (UNIX AND NOT APPLE)
    set(CMAKE_CXX_FLAGS " -static-libstdc++")
    set(common_libraries -static-libstdc++ stdc++fs pthread)
endif (UNIX AND NOT APPLE)

if (APPLE)
    target_link_directories(${PROJECT_NAME} PRIVATE /usr/local/lib)
    set(CMAKE_CXX_FLAGS " -static-libstdc++")
    set(common_libraries -static-libstdc++ pthread)
endif (APPLE)

if (WIN32 AND MINGW)
    # Link all libraries as static
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_FLAGS "-static-libgcc -static-libstdc++ -Wl,-Bstatic,--whole-archive -lwinpthread -Wl,--no-whole-archive")
endif (WIN32 AND MINGW)

# Link with core library
#target_link_directories(${PROJECT_NAME} PRIVATE ${CORE_LIBRARY_PATH}/build)
target_link_libraries(${PROJECT_NAME} PRIVATE core)
target_link_libraries(${PROJECT_NAME} PRIVATE ${common_libraries})



# Copy default config file to binary folder after successfull compilation
SET (CONFIG_FILE ${DATA_PATH}/configs/spectrum128/unreal.ini)
message("CONFIG_FILE: ${CONFIG_FILE}")
message("Binary: ${CMAKE_BINARY_DIR}/${PROJECT_NAME}")
add_custom_command(
        TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E
        copy ${CONFIG_FILE} "${CMAKE_BINARY_DIR}/${PROJECT_NAME}/unreal.ini"
)

add_custom_command(
        TARGET ${PROJECT_NAME} POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E
        copy_directory ${DATA_PATH}/rom ${CMAKE_BINARY_DIR}/${PROJECT_NAME}/rom
)
