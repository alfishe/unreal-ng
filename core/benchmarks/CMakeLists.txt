# CMake entry point
cmake_minimum_required (VERSION 3.13)

message(">> core/benchmarks CMakeLists.txt")

project (core-benchmarks LANGUAGES CXX)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Default to Release mode
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE Release)
endif (NOT CMAKE_BUILD_TYPE)

message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")

# Root directory
get_filename_component(ROOT_DIR ../../ ABSOLUTE BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Set paths
set(CORE_DIR ${ROOT_DIR}/core/src)
set(BENCHMARKS_DIR ${ROOT_DIR}/core/benchmarks)
set(GOOGLETEST_DIR ${ROOT_DIR}/lib/googletest)
set(GOOGLEBENCHMARK_DIR ${ROOT_DIR}/lib/benchmark)
message("CORE_DIR:${CORE_DIR}")
message("BENCHMARKS_DIR:${BENCHMARKS_DIR}")
message("GOOGLETEST_DIR:${GOOGLETEST_DIR}")
message("GOOGLEBENCHMARK_DIR:${GOOGLEBENCHMARK_DIR}")

# Allow CMake to find modules in /cmake
set(CMAKE_MODULE_PATH "${ROOT_DIR}/cmake" ${CMAKE_MODULE_PATH})

# Include CMake helper functions file
include(${ROOT_DIR}/cmake/func.cmake)

if (WIN32 AND NOT MSVC)
set (BENCHMARK_FILES
    ${GOOGLEBENCHMARK_DIR}/src/benchmark.cc
    ${GOOGLEBENCHMARK_DIR}/src/benchmark_api_internal.cc
    ${GOOGLEBENCHMARK_DIR}/src/benchmark_register.cc
    ${GOOGLEBENCHMARK_DIR}/src/benchmark_runner.cc
    ${GOOGLEBENCHMARK_DIR}/src/colorprint.cc
    ${GOOGLEBENCHMARK_DIR}/src/commandlineflags.cc
    ${GOOGLEBENCHMARK_DIR}/src/complexity.cc
    ${GOOGLEBENCHMARK_DIR}/src/console_reporter.cc
    ${GOOGLEBENCHMARK_DIR}/src/counter.cc
    ${GOOGLEBENCHMARK_DIR}/src/json_reporter.cc
    ${GOOGLEBENCHMARK_DIR}/src/reporter.cc
    ${GOOGLEBENCHMARK_DIR}/src/sleep.cc
    ${GOOGLEBENCHMARK_DIR}/src/statistics.cc
    ${GOOGLEBENCHMARK_DIR}/src/sysinfo.cc
    ${GOOGLEBENCHMARK_DIR}/src/timers.cc
    )
endif (WIN32 AND NOT MSVC)

# Google test (explicit sources added to prevent conflicts when gtest and benchmark targets built simultaneously from top level CMakeLists.txt)
set(GOOGLETEST_PATH ${GOOGLETEST_DIR} CACHE PATH "")                            # Hint for Google Benchmark where to find googletest sources
set (GOOGLETEST_FILES
        ${GOOGLETEST_DIR}/googletest/src/gtest.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-death-test.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-filepath.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-matchers.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-port.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-printers.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-test-part.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-typed-test.cc
        ${GOOGLETEST_DIR}/googletest/src/gtest-internal-inl.h
        )

# Google benchmark folder
if (UNIX)
    add_subdirectory(${GOOGLEBENCHMARK_DIR} ${CMAKE_CURRENT_BINARY_DIR}/googlebenchmark)
endif (UNIX)

if (MSVC)
    # Recommendation from: https://cmake.org/pipermail/cmake/2016-April/063337.html
    if (NOT CMAKE_RUNTIME_OUTPUT_DIRECTORY)
        set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/bin")
    endif ()
    if (NOT CMAKE_LIBRARY_OUTPUT_DIRECTORY)
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
    endif()
    if (NOT CMAKE_ARCHIVE_OUTPUT_DIRECTORY)
        set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/lib")
    endif()

    file (GLOB_RECURSE BENCHMARK_SOURCES ${GOOGLEBENCHMARK_DIR}/src/*.cc)
endif (MSVC)
set(BENCHMARK_ENABLE_TESTING OFF)   # Disable Google Benchmark self-testing


# Compiler include folders
include_directories(${CORE_DIR})
include_directories(${GOOGLETEST_DIR}/googletest)                                   # To serve src/gtest-internal-inl.h include
include_directories(${GOOGLETEST_DIR}/googletest/include)
include_directories(${GOOGLEBENCHMARK_DIR}/include)

# Store executable into /bin subfolder
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

# All sources in /benchmarks and subfolders will be compiled
file (GLOB_RECURSE SOURCES ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${SOURCES}" "/build/" FALSE OUTVAR SOURCES)         # Exclude /benchmarks/build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${SOURCES}" "/CMakeFiles/" FALSE OUTVAR SOURCES)    # Exclude /CMakeFile autogenerated files

# All core sources
file (GLOB_RECURSE CORE_SRC ${CORE_DIR}/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CORE_SRC}" "/build/" FALSE OUTVAR CORE_SRC)       # Exclude /src/build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CORE_SRC}" "/CMakeFiles/" FALSE OUTVAR CORE_SRC)  # Exclude /CMakeFile autogenerated files
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CORE_SRC}" "/main.cpp" FALSE OUTVAR CORE_SRC)     # Exclude main.cpp file if exists
set(SOURCES "${SOURCES};${CORE_SRC};${GOOGLETEST_FILES};${BENCHMARK_FILES}")

# Compile benchmarks into executable
add_executable(${PROJECT_NAME} ${SOURCES})

# Declare _DEBUG symbol for compiler
if (CMAKE_BUILD_TYPE MATCHES Debug)
    message(STATUS "CMAKE_BUILD_TYPE:${CMAKE_BUILD_TYPE} - defining '_DEBUG'")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _DEBUG)
endif (CMAKE_BUILD_TYPE MATCHES Debug)

# Enable test wrappers in code
target_compile_definitions(${PROJECT_NAME} PRIVATE _CODE_UNDER_TEST)

# Link with following libraries
if (APPLE)
    set(common_libraries pthread benchmark benchmark_main)
endif (APPLE)

if (UNIX AND NOT APPLE)
    set(common_libraries stdc++ stdc++fs pthread benchmark benchmark_main)
endif (UNIX AND NOT APPLE)

if (WIN32 AND NOT MSVC)
    set(common_libraries stdc++ stdc++fs)
endif (WIN32 AND NOT MSVC)

if (MSVC)
    # Match runtime library with default google benchmark settings. See: https://stackoverflow.com/questions/14172856/compile-with-mt-instead-of-md-using-cmake
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")

    set(common_libraries shlwapi)
endif (MSVC)

target_link_libraries(${PROJECT_NAME} ${common_libraries})