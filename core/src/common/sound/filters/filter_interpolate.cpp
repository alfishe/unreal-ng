#include <cstring>
#include <stdexcept>
#include "filter_interpolate.h"

void FilterInterpolate::startOversamplingBlock()
{
    static constexpr size_t MAX_FIR_BLOCK_INDEX = FIR_ORDER / DECIMATE_FACTOR - 1;

    _firBlockPos = &_firBuffer[FIR_ORDER - _firIndex * DECIMATE_FACTOR];
    _firIndex = (_firIndex + 1) % MAX_FIR_BLOCK_INDEX;
}

void FilterInterpolate::recalculateInterpolationCoefficients(size_t index, double sample)
{
#ifndef NDEBUG
    if (index > DECIMATE_FACTOR - 1)
    {
        throw std::logic_error("Index must be less than DECIMATE_FACTOR - 1");
    }
#endif

    double y1;
    double* c = _c;
    double* y = _y;

    _x += _clockStep;

    if (_x >= 1.0)
    {
        _x -= 1.0;

        y[0] = y[1];
        y[1] = y[2];
        y[2] = y[3];
        y[3] = sample;

        y1 = y[2] - y[0];
        c[0] = 0.5 * y[1] + 0.25 * (y[0] + y[2]);
        c[1] = 0.5 * y1;
        c[2] = 0.25 * (y[3] - y[1] - y1);
    }

    _firBlockPos[index] = (c[2] * _x + c[1]) * _x + c[0];
}

double FilterInterpolate::endOversamplingBlock()
{
    double result = decimate(_firBlockPos);

    return result;
}

/// Decimate samples by factor 8 using polyphase filter
/// @param x Pointer to current sample in audio buffer
/// @return Decimated sample after filtering
/// @details
/// MATLAB DSP toolbox synthesis parameters:
/// MATLAB: (fdatool/filterDesigner)
/// Type: Direct-Form FIR Polyphase Decimator
/// Order: 191
/// Rate change: 1/8

/// Step 1 - Create window FIR filter
///   Response type: Lowpass
///   FIR: Window (Hamming)
///   Order: 192
///   Fs: 44100
///   Fc: 10800
/// Step 2 - modify it for multirate decimator
///   Create a multirate filter (on vertical left toolbar)
///   Type: Decimator
///   Decimation factor: 8
///   Sampling frequency: 44100Hz
///   Use a default Nyquist FIR filter
double FilterInterpolate::decimate(double* x)
{
    double y = -0.0000046183113992051936 * (x[1] + x[191]) +
               -0.00001117761640887225 * (x[2] + x[190]) +
               -0.000018610264502005432 * (x[3] + x[189]) +
               -0.000025134586135631012 * (x[4] + x[188]) +
               -0.000028494281690666197 * (x[5] + x[187]) +
               -0.000026396828793275159 * (x[6] + x[186]) +
               -0.000017094212558802156 * (x[7] + x[185]) +
               0.000023798193576966866 * (x[9] + x[183]) +
               0.000051281160242202183 * (x[10] + x[182]) +
               0.00007762197826243427 * (x[11] + x[181]) +
               0.000096759426664120416 * (x[12] + x[180]) +
               0.00010240229300393402 * (x[13] + x[179]) +
               0.000089344614218077106 * (x[14] + x[178]) +
               0.000054875700118949183 * (x[15] + x[177]) +
               -0.000069839082210680165 * (x[17] + x[175]) +
               -0.0001447966132360757 * (x[18] + x[174]) +
               -0.00021158452917708308 * (x[19] + x[173]) +
               -0.00025535069106550544 * (x[20] + x[172]) +
               -0.00026228714374322104 * (x[21] + x[171]) +
               -0.00022258805927027799 * (x[22] + x[170]) +
               -0.00013323230495695704 * (x[23] + x[169]) +
               0.00016182578767055206 * (x[25] + x[167]) +
               0.00032846175385096581 * (x[26] + x[166]) +
               0.00047045611576184863 * (x[27] + x[165]) +
               0.00055713851457530944 * (x[28] + x[164]) +
               0.00056212565121518726 * (x[29] + x[163]) +
               0.00046901918553962478 * (x[30] + x[162]) +
               0.00027624866838952986 * (x[31] + x[161]) +
               -0.00032564179486838622 * (x[33] + x[159]) +
               -0.00065182310286710388 * (x[34] + x[158]) +
               -0.00092127787309319298 * (x[35] + x[157]) +
               -0.0010772534348943575 * (x[36] + x[156]) +
               -0.0010737727700273478 * (x[37] + x[155]) +
               -0.00088556645390392634 * (x[38] + x[154]) +
               -0.00051581896090765534 * (x[39] + x[153]) +
               0.00059548767193795277 * (x[41] + x[151]) +
               0.0011803558710661009 * (x[42] + x[150]) +
               0.0016527320270369871 * (x[43] + x[149]) +
               0.0019152679330965555 * (x[44] + x[148]) +
               0.0018927324805381538 * (x[45] + x[147]) +
               0.0015481870327877937 * (x[46] + x[146]) +
               0.00089470695834941306 * (x[47] + x[145]) +
               -0.0010178225878206125 * (x[49] + x[143]) +
               -0.0020037400552054292 * (x[50] + x[142]) +
               -0.0027874356824117317 * (x[51] + x[141]) +
               -0.003210329988021943 * (x[52] + x[140]) +
               -0.0031540624117984395 * (x[53] + x[139]) +
               -0.0025657163651900345 * (x[54] + x[138]) +
               -0.0014750752642111449 * (x[55] + x[137]) +
               0.0016624165446378462 * (x[57] + x[135]) +
               0.0032591192839069179 * (x[58] + x[134]) +
               0.0045165685815867747 * (x[59] + x[133]) +
               0.0051838984346123896 * (x[60] + x[132]) +
               0.0050774264697459933 * (x[61] + x[131]) +
               0.0041192521414141585 * (x[62] + x[130]) +
               0.0023628575417966491 * (x[63] + x[129]) +
               -0.0026543507866759182 * (x[65] + x[127]) +
               -0.0051990251084333425 * (x[66] + x[126]) +
               -0.0072020238234656924 * (x[67] + x[125]) +
               -0.0082672928192007358 * (x[68] + x[124]) +
               -0.0081033739572956287 * (x[69] + x[123]) +
               -0.006583111539570221 * (x[70] + x[122]) +
               -0.0037839040415292386 * (x[71] + x[121]) +
               0.0042781252851152507 * (x[73] + x[119]) +
               0.0084176358598320178 * (x[74] + x[118]) +
               0.01172566057463055 * (x[75] + x[117]) +
               0.013550476647788672 * (x[76] + x[116]) +
               0.013388189369997496 * (x[77] + x[115]) +
               0.010979501242341259 * (x[78] + x[114]) +
               0.006381274941685413 * (x[79] + x[113]) +
               -0.007421229604153888 * (x[81] + x[111]) +
               -0.01486456304340213 * (x[82] + x[110]) +
               -0.021143584622178104 * (x[83] + x[109]) +
               -0.02504275058758609 * (x[84] + x[108]) +
               -0.025473530942547201 * (x[85] + x[107]) +
               -0.021627310017882196 * (x[86] + x[106]) +
               -0.013104323383225543 * (x[87] + x[105]) +
               0.017065133989980476 * (x[89] + x[103]) +
               0.036978919264451952 * (x[90] + x[102]) +
               0.05823318062093958 * (x[91] + x[101]) +
               0.079072012081405949 * (x[92] + x[100]) +
               0.097675998716952317 * (x[93] + x[99]) +
               0.11236045936950932 * (x[94] + x[98]) +
               0.12176343577287731 * (x[95] + x[97]) +
               0.125 * x[96];

    // Copy
    memcpy(&x[FIR_ORDER - DECIMATE_FACTOR], x, DECIMATE_FACTOR * sizeof(double));

    return y;
}
