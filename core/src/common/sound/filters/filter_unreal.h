#pragma once

#include <stdafx.h>


/// Implements 40th order FIR DSP filter with 64x (2^6) oversampling
static struct UnrealFilter
{
    /// region <Filter constants>
protected:
    static constexpr size_t OVERSAMPLING_FACTOR = 64;
    static constexpr size_t FILTER_ARRAY_SIZE = OVERSAMPLING_FACTOR * 2;
    static constexpr size_t OVERSAMPLING_FACTOR_BITMASK = OVERSAMPLING_FACTOR - 1;

    static constexpr double _oversamplingFIRCoefficients[FILTER_ARRAY_SIZE] =
    {
        // FIR filter designed with Matlab's DSP toolbox
        0.000797243121022152, 0.000815206499600866, 0.000844792477531490, 0.000886460636664257,
        0.000940630171246217, 0.001007677515787512, 0.001087934129054332, 0.001181684445143001,
        0.001289164001921830, 0.001410557756409498, 0.001545998595893740, 0.001695566052785407,
        0.001859285230354019, 0.002037125945605404, 0.002229002094643918, 0.002434771244914945,
        0.002654234457752337, 0.002887136343664226, 0.003133165351783907, 0.003391954293894633,
        0.003663081102412781, 0.003946069820687711, 0.004240391822953223, 0.004545467260249598,
        0.004860666727631453, 0.005185313146989532, 0.005518683858848785, 0.005860012915564928,
        0.006208493567431684, 0.006563280932335042, 0.006923494838753613, 0.007288222831108771,
        0.007656523325719262, 0.008027428904915214, 0.008399949736219575, 0.008773077102914008,
        0.009145787031773989, 0.009517044003286715, 0.009885804729257883, 0.010251021982371376,
        0.010611648461991030, 0.010966640680287394, 0.011314962852635887, 0.011655590776166550,
        0.011987515680350414, 0.012309748033583185, 0.012621321289873522, 0.012921295559959939,
        0.013208761191466523, 0.013482842243062109, 0.013742699838008606, 0.013987535382970279,
        0.014216593638504731, 0.014429165628265581, 0.014624591374614174, 0.014802262449059521,
        0.014961624326719471, 0.015102178534818147, 0.015223484586101132, 0.015325161688957322,
        0.015406890226980602, 0.015468413001680802, 0.015509536233058410, 0.015530130313785910,
        0.015530130313785910, 0.015509536233058410, 0.015468413001680802, 0.015406890226980602,
        0.015325161688957322, 0.015223484586101132, 0.015102178534818147, 0.014961624326719471,
        0.014802262449059521, 0.014624591374614174, 0.014429165628265581, 0.014216593638504731,
        0.013987535382970279, 0.013742699838008606, 0.013482842243062109, 0.013208761191466523,
        0.012921295559959939, 0.012621321289873522, 0.012309748033583185, 0.011987515680350414,
        0.011655590776166550, 0.011314962852635887, 0.010966640680287394, 0.010611648461991030,
        0.010251021982371376, 0.009885804729257883, 0.009517044003286715, 0.009145787031773989,
        0.008773077102914008, 0.008399949736219575, 0.008027428904915214, 0.007656523325719262,
        0.007288222831108771, 0.006923494838753613, 0.006563280932335042, 0.006208493567431684,
        0.005860012915564928, 0.005518683858848785, 0.005185313146989532, 0.004860666727631453,
        0.004545467260249598, 0.004240391822953223, 0.003946069820687711, 0.003663081102412781,
        0.003391954293894633, 0.003133165351783907, 0.002887136343664226, 0.002654234457752337,
        0.002434771244914945, 0.002229002094643918, 0.002037125945605404, 0.001859285230354019,
        0.001695566052785407, 0.001545998595893740, 0.001410557756409498, 0.001289164001921830,
        0.001181684445143001, 0.001087934129054332, 0.001007677515787512, 0.000940630171246217,
        0.000886460636664257, 0.000844792477531490, 0.000815206499600866, 0.000797243121022152
    };

    // Helper array with cumulative coefficients sum
    size_t _oversamplingFIRSums[FILTER_ARRAY_SIZE];

    static constexpr double _filterSumFull = 1.0;
    static constexpr double _filterSumHalf = 0.5;
    static constexpr size_t _filterSumFullUnsigned = (size_t)(_filterSumFull * 0x10000);
    static constexpr size_t _filterSumHalfUnsigned = (size_t)(_filterSumHalf * 0x10000);

    /// endregion </Filter constants>

    /// region <Fields>
protected:
    // Timing parameters
    size_t _systemClockRate;
    size_t _audioChipClockRate;
    size_t _outputSampleRate;

    // Interpolation-related
    size_t s1_l;
    size_t s1_r;
    size_t s2_l;
    size_t s2_r;

    /// endregion </Fields>

    /// region <Constructor / destructors>
public:
    /// Initialize helper array in constructor
    UnrealFilter();
    virtual ~UnrealFilter() = default;
    /// endregion </Constructor / destructors>

    /// region <Methods>
public:
    void setTimings(size_t systemClockRate, size_t audioChipClockRate, size_t outputSampleRate);

    void interpolate(uint32_t startTick, uint32_t endTick, uint32_t left, uint32_t right);
    /// region </Methods>
} UnrealDSPFilter;
