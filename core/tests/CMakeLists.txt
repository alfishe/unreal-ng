cmake_minimum_required(VERSION 3.16.0)

message(">> core/tests CMakeLists.txt")

# Project named 'core-tests' on C++
project(core-tests LANGUAGES CXX)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

# Root directory
get_filename_component(ROOT_DIR ../../ ABSOLUTE BASE_DIR ${CMAKE_CURRENT_SOURCE_DIR})

# Include CMake helper functions file
include(${ROOT_DIR}/cmake/func.cmake)

# Set paths
set(CORE_DIR ${ROOT_DIR}/core/src)
set(TESTS_DIR ${ROOT_DIR}/core/tests)
set(GOOGLETEST_DIR ${ROOT_DIR}/lib/googletest)
message("CORE_DIR:${CORE_DIR}")
message("TESTS_DIR:${TESTS_DIR}")
message("GOOGLETEST_DIR:${GOOGLETEST_DIR}")

# Set include files search paths
include_directories(
	${TESTS_DIR}
	${CORE_DIR}
	${GOOGLETEST_DIR}/googletest/include
)

# Compile GoogleTest to <binary>/googletest subfolder
add_subdirectory(${GOOGLETEST_DIR} ${CMAKE_CURRENT_BINARY_DIR}/googletest)


# Compile all *.cpp files both from core/src and core/tests folders
file (GLOB_RECURSE TEST_CPP_FILES ${TESTS_DIR}/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${TEST_CPP_FILES}" "/build/" FALSE OUTVAR TEST_CPP_FILES)      # Exclude /tests/build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${TEST_CPP_FILES}" "/CMakeFiles/" FALSE OUTVAR TEST_CPP_FILES) # Exclude /CMakeFile autogenerated files
file (GLOB_RECURSE CORE_CPP_FILES ${CORE_DIR}/*.cpp)
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CORE_CPP_FILES}" "/build/" FALSE OUTVAR CORE_CPP_FILES)      # Exclude /tests/build folder
EXCLUDE_FILES_FROM_DIR_IN_LIST("${CORE_CPP_FILES}" "/CMakeFiles/" FALSE OUTVAR CORE_CPP_FILES) # Exclude /CMakeFile autogenerated files

set (SOURCES "${CORE_CPP_FILES};${TEST_CPP_FILES}")
message("SOURCES:${SOURCES}")

# Compile tests into executable
add_executable(${PROJECT_NAME} ${SOURCES})

# Declare _DEBUG symbol for compiler
if (CMAKE_BUILD_TYPE MATCHES Debug)
    message(STATUS "CMAKE_BUILD_TYPE:${CMAKE_BUILD_TYPE} - defining '_DEBUG'")
    target_compile_definitions(${PROJECT_NAME} PRIVATE _DEBUG)
endif (CMAKE_BUILD_TYPE MATCHES Debug)

# Enable test wrappers in code
target_compile_definitions(${PROJECT_NAME} PRIVATE _CODE_UNDER_TEST)

# 'pch.h' is our precompiled header
#target_precompile_headers(${PROJECT_NAME} PRIVATE ${TESTS_DIR}/pch.h)

target_link_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/googletest)

# All standard libraries required
if (WINDOWS)
    set(common_libraries stdc++ stdc++fs gtest)
endif (WINDOWS)

if (UNIX AND NOT APPLE)
    set(CMAKE_CXX_FLAGS " -static-libstdc++")
    set(common_libraries -static-libstdc++ stdc++fs pthread gtest)
endif (UNIX AND NOT APPLE)

if (APPLE)
    target_link_directories(${PROJECT_NAME} PRIVATE /usr/local/lib)
    set(CMAKE_CXX_FLAGS " -static-libstdc++")
    set(common_libraries -static-libstdc++ stdc++fs pthread gtest)
endif (APPLE)

target_link_libraries(${PROJECT_NAME} ${common_libraries})

